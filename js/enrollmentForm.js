jQuery(document).ready(function() {

    jQuery('#enrollment-step5 input[type=checkbox]').first().css({"opacity" : "1"});

    jQuery('#enrollment-step5 input[type=checkbox]').change(function() {
		jQuery(this).parent().next('div').find('label').css({"opacity" : "1"});
    });

});


Assist = {};

Assist.hasUnloadWarning = false;

Assist.oklahomaZips = ["73001", "73002", "73003", "73004", "73005", "73007", "73008", "73009", "73013", "73016", "73017", "73018", "73019", "73020", "73026", "73027", "73030", "73034", "73036", "73038", "73044", "73045", "73049", "73050", "73051", "73052", "73054", "73055", "73057", "73058", "73059", "73061", "73063", "73064", "73066", "73067", "73068", "73069", "73071", "73072", "73075", "73077", "73078", "73079", "73080", "73082", "73084", "73089", "73093", "73095", "73096", "73097", "73098", "73099", "73101", "73102", "73103", "73104", "73105", "73106", "73107", "73108", "73109", "73110", "73111", "73112", "73114", "73115", "73116", "73117", "73118", "73119", "73120", "73121", "73122", "73125", "73126", "73127", "73128", "73129", "73130", "73131", "73132", "73134", "73135", "73139", "73141", "73142", "73143", "73145", "73149", "73150", "73151", "73159", "73160", "73162", "73163", "73165", "73167", "73169", "73170", "73173", "73179", "73190", "73195", "73401", "73402", "73430", "73432", "73438", "73439", "73440", "73441", "73446", "73447", "73448", "73449", "73455", "73456", "73459", "73460", "73461", "73463", "73501", "73503", "73505", "73507", "73521", "73522", "73526", "73527", "73533", "73537", "73543", "73547", "73549", "73552", "73554", "73560", "73565", "73572", "73573", "73601", "73620", "73622", "73632", "73644", "73651", "73655", "73661", "73662", "73701", "73703", "73705", "73717", "73720", "73727", "73728", "73736", "73737", "73743", "73744", "73753", "73759", "73771", "73773", "73801", "73842", "73860", "73938", "74001", "74002", "74003", "74004", "74005", "74006", "74008", "74009", "74010", "74011", "74012", "74013", "74014", "74015", "74016", "74017", "74020", "74021", "74022", "74023", "74027", "74028", "74030", "74032", "74033", "74035", "74037", "74038", "74041", "74048", "74052", "74053", "74055", "74056", "74059", "74061", "74062", "74063", "74066", "74070", "74072", "74073", "74074", "74075", "74076", "74078", "74079", "74083", "74085", "74101", "74103", "74104", "74105", "74106", "74107", "74108", "74110", "74112", "74114", "74115", "74116", "74119", "74120", "74126", "74127", "74128", "74129", "74130", "74131", "74132", "74133", "74134", "74135", "74136", "74137", "74145", "74146", "74149", "74158", "74172", "74301", "74331", "74339", "74343", "74344", "74346", "74349", "74350", "74354", "74358", "74360", "74361", "74363", "74369", "74370", "74401", "74402", "74403", "74422", "74423", "74426", "74427", "74429", "74431", "74432", "74434", "74435", "74436", "74437", "74441", "74445", "74446", "74447", "74450", "74451", "74454", "74457", "74460", "74461", "74462", "74464", "74467", "74472", "74501", "74502", "74523", "74525", "74531", "74533", "74534", "74538", "74543", "74546", "74547", "74554", "74555", "74556", "74557", "74562", "74571", "74572", "74577", "74578", "74601", "74604", "74630", "74631", "74637", "74641", "74644", "74647", "74650", "74651", "74653", "74701", "74723", "74727", "74729", "74735", "74738", "74740", "74743", "74745", "74748", "74756", "74759", "74761", "74764", "74801", "74804", "74820", "74825", "74826", "74831", "74832", "74834", "74837", "74848", "74849", "74854", "74855", "74859", "74860", "74864", "74865", "74866", "74868", "74872", "74873", "74878", "74880", "74881", "74883", "74884", "74901", "74902", "74930", "74936", "74946", "74948", "74954", "74955", "74959", "74963", "74965"];
Assist.missouriZips = ["63005", "63006", "63010", "63011", "63012", "63013", "63014", "63015", "63016", "63017", "63019", "63020", "63021", "63022", "63023", "63024", "63025", "63026", "63028", "63030", "63031", "63032", "63033", "63034", "63036", "63037", "63038", "63039", "63040", "63041", "63042", "63043", "63044", "63045", "63047", "63048", "63049", "63050", "63051", "63052", "63053", "63055", "63056", "63057", "63060", "63061", "63065", "63066", "63068", "63069", "63070", "63071", "63072", "63073", "63074", "63077", "63079", "63080", "63084", "63087", "63088", "63089", "63090", "63091", "63099", "63101", "63102", "63103", "63104", "63105", "63106", "63107", "63108", "63109", "63110", "63111", "63112", "63113", "63114", "63115", "63116", "63117", "63118", "63119", "63120", "63121", "63122", "63123", "63124", "63125", "63126", "63127", "63128", "63129", "63130", "63131", "63132", "63133", "63134", "63135", "63136", "63137", "63138", "63139", "63140", "63141", "63143", "63144", "63145", "63146", "63147", "63150", "63151", "63155", "63156", "63157", "63158", "63160", "63163", "63164", "63166", "63167", "63169", "63171", "63177", "63178", "63179", "63180", "63182", "63188", "63190", "63195", "63196", "63197", "63198", "63199", "63301", "63302", "63303", "63304", "63330", "63332", "63333", "63334", "63336", "63338", "63339", "63341", "63342", "63343", "63344", "63345", "63346", "63347", "63348", "63349", "63350", "63351", "63352", "63353", "63357", "63359", "63361", "63362", "63363", "63365", "63366", "63367", "63368", "63369", "63370", "63373", "63376", "63377", "63378", "63379", "63381", "63382", "63383", "63384", "63385", "63386", "63387", "63388", "63389", "63390", "63401", "63430", "63431", "63432", "63433", "63434", "63435", "63436", "63437", "63438", "63439", "63440", "63441", "63442", "63443", "63445", "63446", "63447", "63448", "63450", "63451", "63452", "63453", "63454", "63456", "63457", "63458", "63459", "63460", "63461", "63462", "63463", "63464", "63465", "63466", "63467", "63468", "63469", "63471", "63472", "63473", "63474", "63501", "63530", "63531", "63532", "63533", "63534", "63535", "63536", "63537", "63538", "63539", "63540", "63541", "63543", "63544", "63545", "63546", "63547", "63548", "63549", "63551", "63552", "63555", "63556", "63557", "63558", "63559", "63560", "63561", "63563", "63565", "63566", "63567", "63601", "63620", "63621", "63622", "63623", "63624", "63625", "63626", "63627", "63628", "63629", "63630", "63631", "63632", "63633", "63636", "63637", "63638", "63640", "63645", "63648", "63650", "63651", "63653", "63654", "63655", "63656", "63660", "63662", "63663", "63664", "63665", "63666", "63670", "63673", "63674", "63675", "63701", "63702", "63703", "63730", "63732", "63735", "63736", "63737", "63738", "63739", "63740", "63742", "63743", "63744", "63745", "63746", "63747", "63748", "63750", "63751", "63752", "63755", "63758", "63760", "63763", "63764", "63766", "63767", "63769", "63770", "63771", "63774", "63775", "63776", "63779", "63780", "63781", "63782", "63783", "63784", "63785", "63787", "63801", "63820", "63821", "63822", "63823", "63824", "63825", "63826", "63827", "63828", "63829", "63830", "63833", "63834", "63837", "63839", "63840", "63841", "63845", "63846", "63847", "63848", "63849", "63850", "63851", "63852", "63853", "63855", "63857", "63860", "63862", "63863", "63866", "63867", "63868", "63869", "63870", "63873", "63874", "63875", "63876", "63877", "63878", "63879", "63880", "63881", "63882", "63901", "63902", "63931", "63932", "63933", "63934", "63935", "63936", "63937", "63938", "63939", "63940", "63941", "63942", "63943", "63944", "63945", "63950", "63951", "63952", "63953", "63954", "63955", "63956", "63957", "63960", "63961", "63962", "63963", "63964", "63965", "63966", "63967", "64001", "64011", "64012", "64013", "64014", "64015", "64016", "64017", "64018", "64019", "64020", "64021", "64022", "64024", "64028", "64029", "64030", "64034", "64035", "64036", "64037", "64040", "64048", "64050", "64051", "64052", "64053", "64054", "64055", "64056", "64057", "64058", "64060", "64061", "64062", "64063", "64064", "64065", "64066", "64067", "64068", "64069", "64070", "64071", "64072", "64073", "64074", "64075", "64076", "64077", "64078", "64079", "64080", "64081", "64082", "64083", "64084", "64085", "64086", "64088", "64089", "64090", "64092", "64093", "64096", "64097", "64098", "64101", "64102", "64105", "64106", "64108", "64109", "64110", "64111", "64112", "64113", "64114", "64116", "64117", "64118", "64119", "64120", "64121", "64123", "64124", "64125", "64126", "64127", "64128", "64129", "64130", "64131", "64132", "64133", "64134", "64136", "64137", "64138", "64139", "64141", "64144", "64145", "64146", "64147", "64148", "64149", "64150", "64151", "64152", "64153", "64154", "64155", "64156", "64157", "64158", "64161", "64163", "64164", "64165", "64166", "64167", "64168", "64170", "64171", "64172", "64179", "64180", "64183", "64184", "64185", "64187", "64188", "64190", "64191", "64192", "64193", "64194", "64195", "64196", "64197", "64198", "64199", "64401", "64402", "64420", "64421", "64422", "64423", "64424", "64426", "64427", "64428", "64429", "64430", "64431", "64432", "64433", "64434", "64436", "64437", "64438", "64439", "64440", "64441", "64442", "64443", "64444", "64445", "64446", "64447", "64448", "64449", "64451", "64453", "64454", "64455", "64456", "64457", "64458", "64459", "64461", "64463", "64465", "64466", "64467", "64468", "64469", "64470", "64471", "64473", "64474", "64475", "64476", "64477", "64479", "64480", "64481", "64482", "64483", "64484", "64485", "64486", "64487", "64489", "64490", "64491", "64492", "64493", "64494", "64496", "64497", "64498", "64499", "64501", "64502", "64503", "64504", "64505", "64506", "64507", "64508", "64601", "64620", "64622", "64623", "64624", "64625", "64628", "64630", "64631", "64632", "64633", "64635", "64636", "64637", "64638", "64639", "64640", "64641", "64642", "64643", "64644", "64645", "64646", "64647", "64648", "64649", "64650", "64651", "64652", "64653", "64654", "64655", "64656", "64657", "64658", "64659", "64660", "64661", "64664", "64667", "64668", "64670", "64671", "64672", "64673", "64674", "64676", "64679", "64680", "64681", "64682", "64683", "64686", "64688", "64689", "64701", "64720", "64722", "64723", "64724", "64725", "64726", "64728", "64730", "64733", "64734", "64735", "64738", "64739", "64740", "64741", "64742", "64743", "64744", "64745", "64746", "64747", "64748", "64750", "64752", "64755", "64756", "64759", "64761", "64762", "64763", "64765", "64766", "64767", "64769", "64770", "64771", "64772", "64776", "64778", "64779", "64780", "64781", "64783", "64784", "64788", "64789", "64790", "64801", "64802", "64803", "64804", "64830", "64831", "64832", "64833", "64834", "64835", "64836", "64840", "64841", "64842", "64843", "64844", "64847", "64848", "64849", "64850", "64853", "64854", "64855", "64856", "64857", "64858", "64859", "64861", "64862", "64863", "64864", "64865", "64866", "64867", "64868", "64869", "64870", "64873", "64874", "64944", "64999", "65001", "65010", "65011", "65013", "65014", "65016", "65017", "65018", "65020", "65023", "65024", "65025", "65026", "65032", "65034", "65035", "65036", "65037", "65038", "65039", "65040", "65041", "65042", "65043", "65046", "65047", "65048", "65049", "65050", "65051", "65052", "65053", "65054", "65055", "65058", "65059", "65061", "65062", "65063", "65064", "65065", "65066", "65067", "65068", "65069", "65072", "65074", "65075", "65076", "65077", "65078", "65079", "65080", "65081", "65082", "65083", "65084", "65085", "65101", "65102", "65103", "65104", "65105", "65106", "65107", "65108", "65109", "65110", "65111", "65201", "65202", "65203", "65205", "65211", "65212", "65215", "65216", "65217", "65218", "65230", "65231", "65232", "65233", "65236", "65237", "65239", "65240", "65243", "65244", "65246", "65247", "65248", "65250", "65251", "65254", "65255", "65256", "65257", "65258", "65259", "65260", "65261", "65262", "65263", "65264", "65265", "65270", "65274", "65275", "65276", "65278", "65279", "65280", "65281", "65282", "65283", "65284", "65285", "65286", "65287", "65299", "65301", "65302", "65305", "65320", "65321", "65322", "65323", "65324", "65325", "65326", "65327", "65329", "65330", "65332", "65333", "65334", "65335", "65336", "65337", "65338", "65339", "65340", "65344", "65345", "65347", "65348", "65349", "65350", "65351", "65354", "65355", "65360", "65401", "65402", "65409", "65436", "65438", "65439", "65440", "65441", "65443", "65444", "65446", "65449", "65452", "65453", "65456", "65457", "65459", "65461", "65462", "65463", "65464", "65466", "65468", "65470", "65473", "65479", "65483", "65484", "65486", "65501", "65529", "65532", "65534", "65535", "65536", "65541", "65542", "65543", "65546", "65548", "65550", "65552", "65555", "65556", "65557", "65559", "65560", "65564", "65565", "65566", "65567", "65570", "65571", "65580", "65582", "65583", "65584", "65586", "65588", "65589", "65590", "65591", "65601", "65603", "65604", "65605", "65606", "65607", "65608", "65609", "65610", "65611", "65612", "65613", "65614", "65615", "65616", "65617", "65618", "65619", "65620", "65622", "65623", "65624", "65625", "65626", "65627", "65629", "65630", "65631", "65632", "65633", "65634", "65635", "65636", "65637", "65638", "65640", "65641", "65644", "65645", "65646", "65647", "65648", "65649", "65650", "65652", "65653", "65654", "65655", "65656", "65657", "65658", "65660", "65661", "65662", "65663", "65664", "65666", "65667", "65668", "65669", "65672", "65673", "65674", "65675", "65676", "65679", "65680", "65681", "65682", "65685", "65686", "65688", "65689", "65690", "65692", "65701", "65702", "65704", "65705", "65706", "65707", "65708", "65710", "65711", "65712", "65713", "65714", "65715", "65717", "65720", "65721", "65722", "65723", "65724", "65725", "65726", "65727", "65728", "65729", "65730", "65731", "65732", "65733", "65734", "65735", "65737", "65738", "65739", "65740", "65741", "65742", "65744", "65745", "65746", "65747", "65752", "65753", "65754", "65755", "65756", "65757", "65759", "65760", "65761", "65762", "65764", "65765", "65766", "65767", "65768", "65769", "65770", "65771", "65772", "65773", "65774", "65775", "65776", "65777", "65778", "65779", "65781", "65783", "65784", "65785", "65786", "65787", "65788", "65789", "65790", "65791", "65793", "65801", "65802", "65803", "65804", "65805", "65806", "65807", "65808", "65809", "65810", "65814", "65817", "65890", "65897", "65898", "65899"];
Assist.marylandZips = [ "20602", "20603", "20604", "20606", "20607", "20608", "20609", "20610", "20611", "20612", "20613", "20615", "20616", "20617", "20618", "20619", "20620", "20621", "20622", "20623", "20624", "20625", "20626", "20627", "20628", "20629", "20630", "20632", "20634", "20635", "20636", "20637", "20639", "20640", "20643", "20645", "20646", "20650", "20653", "20656", "20657", "20658", "20659", "20660", "20661", "20662", "20664", "20667", "20670", "20674", "20675", "20676", "20677", "20678", "20680", "20682", "20684", "20685", "20686", "20687", "20688", "20689", "20690", "20692", "20693", "20695", "20697", "20701", "20703", "20704", "20705", "20706", "20707", "20708", "20709", "20710", "20711", "20712", "20714", "20715", "20716", "20717", "20718", "20719", "20720", "20721", "20722", "20723", "20724", "20725", "20726", "20731", "20732", "20733", "20735", "20736", "20737", "20738", "20740", "20741", "20742", "20743", "20744", "20745", "20746", "20747", "20748", "20749", "20750", "20751", "20752", "20753", "20754", "20755", "20757", "20758", "20759", "20762", "20763", "20764", "20765", "20768", "20769", "20770", "20771", "20772", "20773", "20774", "20775", "20776", "20777", "20778", "20779", "20781", "20782", "20783", "20784", "20785", "20787", "20788", "20790", "20791", "20792", "20794", "20797", "20799", "20810", "20811", "20812", "20813", "20814", "20815", "20816", "20817", "20818", "20824", "20825", "20827", "20830", "20832", "20833", "20837", "20838", "20839", "20841", "20842", "20847", "20848", "20849", "20850", "20851", "20852", "20853", "20854", "20855", "20857", "20859", "20860", "20861", "20862", "20866", "20868", "20871", "20872", "20874", "20875", "20876", "20877", "20878", "20879", "20880", "20882", "20883", "20884", "20885", "20886", "20889", "20891", "20892", "20894", "20895", "20896", "20897", "20898", "20899", "20901", "20902", "20903", "20904", "20905", "20906", "20907", "20908", "20910", "20911", "20912", "20913", "20914", "20915", "20916", "20918", "20993", "20997", "21001", "21005", "21009", "21010", "21012", "21013", "21014", "21015", "21017", "21018", "21020", "21022", "21023", "21027", "21028", "21029", "21030", "21031", "21032", "21034", "21035", "21036", "21037", "21040", "21041", "21042", "21043", "21044", "21045", "21046", "21047", "21048", "21050", "21051", "21052", "21053", "21054", "21056", "21057", "21060", "21061", "21062", "21065", "21071", "21074", "21075", "21076", "21077", "21078", "21082", "21084", "21085", "21087", "21088", "21090", "21092", "21093", "21094", "21098", "21102", "21104", "21105", "21106", "21108", "21111", "21113", "21114", "21117", "21120", "21122", "21123", "21128", "21130", "21131", "21132", "21133", "21136", "21139", "21140", "21144", "21146", "21150", "21152", "21153", "21154", "21155", "21156", "21157", "21158", "21160", "21161", "21162", "21163", "21201", "21202", "21203", "21204", "21205", "21206", "21207", "21208", "21209", "21210", "21211", "21212", "21213", "21214", "21215", "21216", "21217", "21218", "21219", "21220", "21221", "21222", "21223", "21224", "21225", "21226", "21227", "21228", "21229", "21230", "21231", "21233", "21234", "21235", "21236", "21237", "21239", "21240", "21241", "21244", "21250", "21251", "21252", "21263", "21264", "21265", "21268", "21270", "21273", "21274", "21275", "21278", "21279", "21280", "21281", "21282", "21283", "21284", "21285", "21286", "21287", "21288", "21289", "21290", "21297", "21298", "21401", "21402", "21403", "21404", "21405", "21409", "21411", "21412", "21501", "21502", "21503", "21504", "21505", "21520", "21521", "21522", "21523", "21524", "21528", "21529", "21530", "21531", "21532", "21536", "21538", "21539", "21540", "21541", "21542", "21543", "21545", "21550", "21555", "21556", "21557", "21560", "21561", "21562", "21601", "21606", "21607", "21609", "21610", "21612", "21613", "21617", "21619", "21620", "21622", "21623", "21624", "21625", "21626", "21627", "21628", "21629", "21631", "21632", "21634", "21635", "21636", "21638", "21639", "21640", "21641", "21643", "21644", "21645", "21647", "21648", "21649", "21650", "21651", "21652", "21653", "21654", "21655", "21656", "21657", "21658", "21659", "21660", "21661", "21662", "21663", "21664", "21665", "21666", "21667", "21668", "21669", "21670", "21671", "21672", "21673", "21675", "21676", "21677", "21678", "21679", "21681", "21682", "21683", "21684", "21685", "21686", "21687", "21688", "21690", "21701", "21702", "21703", "21704", "21705", "21709", "21710", "21711", "21713", "21714", "21715", "21716", "21717", "21718", "21719", "21720", "21721", "21722", "21723", "21727", "21733", "21734", "21737", "21738", "21740", "21741", "21742", "21746", "21747", "21748", "21749", "21750", "21754", "21755", "21756", "21757", "21758", "21759", "21762", "21765", "21766", "21767", "21769", "21770", "21771", "21773", "21774", "21775", "21776", "21777", "21778", "21779", "21780", "21781", "21782", "21783", "21784", "21787", "21788", "21790", "21791", "21792", "21793", "21794", "21795", "21797", "21798", "21801", "21802", "21803", "21804", "21810", "21811", "21813", "21814", "21817", "21821", "21822", "21824", "21826", "21829", "21830", "21835", "21836", "21837", "21838", "21840", "21841", "21842", "21843", "21849", "21850", "21851", "21852", "21853", "21856", "21857", "21861", "21862", "21863", "21864", "21865", "21866", "21867", "21869", "21871", "21872", "21874", "21875", "21890", "21901", "21902", "21903", "21904", "21911", "21912", "21913", "21914", "21915", "21916", "21917", "21918", "21919", "21920", "21921", "21922", "21930"
];
Assist.arkansasZips = [ "71602", "71603", "71611", "71612", "71613", "71630", "71631", "71635", "71638", "71639", "71640", "71642", "71643", "71644", "71646", "71647", "71651", "71652", "71653", "71654", "71655", "71656", "71657", "71658", "71659", "71660", "71661", "71662", "71663", "71665", "71666", "71667", "71670", "71671", "71674", "71675", "71676", "71677", "71678", "71701", "71711", "71720", "71721", "71722", "71724", "71725", "71726", "71728", "71730", "71731", "71740", "71742", "71743", "71744", "71745", "71747", "71748", "71749", "71750", "71751", "71752", "71753", "71754", "71758", "71759", "71762", "71763", "71764", "71765", "71766", "71768", "71770", "71772", "71801", "71802", "71820", "71822", "71823", "71825", "71826", "71827", "71828", "71831", "71832", "71833", "71834", "71835", "71836", "71837", "71838", "71839", "71840", "71841", "71842", "71844", "71845", "71846", "71847", "71851", "71852", "71853", "71854", "71855", "71857", "71858", "71859", "71860", "71861", "71862", "71864", "71865", "71866", "71901", "71902", "71903", "71909", "71910", "71913", "71914", "71920", "71921", "71922", "71923", "71929", "71932", "71933", "71935", "71937", "71940", "71941", "71942", "71943", "71944", "71945", "71949", "71950", "71951", "71952", "71953", "71956", "71957", "71958", "71959", "71960", "71961", "71962", "71964", "71965", "71966", "71968", "71969", "71970", "71971", "71972", "71973", "71998", "71999", "72001", "72002", "72003", "72004", "72005", "72006", "72007", "72010", "72011", "72012", "72013", "72014", "72015", "72016", "72017", "72018", "72019", "72020", "72021", "72022", "72023", "72024", "72025", "72026", "72027", "72028", "72029", "72030", "72031", "72032", "72033", "72034", "72035", "72036", "72037", "72038", "72039", "72040", "72041", "72042", "72043", "72044", "72045", "72046", "72047", "72048", "72051", "72052", "72053", "72055", "72057", "72058", "72059", "72060", "72061", "72063", "72064", "72065", "72066", "72067", "72068", "72069", "72070", "72072", "72073", "72074", "72075", "72076", "72078", "72079", "72080", "72081", "72082", "72083", "72084", "72085", "72086", "72087", "72088", "72089", "72099", "72101", "72102", "72103", "72104", "72105", "72106", "72107", "72108", "72110", "72111", "72112", "72113", "72114", "72115", "72116", "72117", "72118", "72119", "72120", "72121", "72122", "72123", "72124", "72125", "72126", "72127", "72128", "72129", "72130", "72131", "72132", "72133", "72134", "72135", "72136", "72137", "72139", "72140", "72141", "72142", "72143", "72145", "72149", "72150", "72152", "72153", "72156", "72157", "72158", "72160", "72164", "72165", "72166", "72167", "72168", "72169", "72170", "72173", "72175", "72176", "72178", "72179", "72180", "72181", "72182", "72183", "72189", "72190", "72198", "72199", "72201", "72202", "72203", "72204", "72205", "72206", "72207", "72209", "72210", "72211", "72212", "72214", "72215", "72216", "72217", "72219", "72221", "72222", "72223", "72225", "72227", "72231", "72260", "72295", "72301", "72303", "72310", "72311", "72312", "72313", "72315", "72316", "72319", "72320", "72321", "72322", "72324", "72325", "72326", "72327", "72328", "72329", "72330", "72331", "72332", "72333", "72335", "72336", "72338", "72339", "72340", "72341", "72342", "72346", "72347", "72348", "72350", "72351", "72352", "72353", "72354", "72355", "72358", "72359", "72360", "72364", "72365", "72366", "72367", "72368", "72369", "72370", "72372", "72373", "72374", "72376", "72377", "72379", "72383", "72384", "72386", "72387", "72389", "72390", "72391", "72392", "72394", "72395", "72396", "72401", "72402", "72403", "72404", "72410", "72411", "72412", "72413", "72414", "72415", "72416", "72417", "72419", "72421", "72422", "72424", "72425", "72426", "72427", "72428", "72429", "72430", "72431", "72432", "72433", "72434", "72435", "72436", "72437", "72438", "72439", "72440", "72441", "72442", "72443", "72444", "72445", "72447", "72449", "72450", "72451", "72453", "72454", "72455", "72456", "72457", "72458", "72459", "72460", "72461", "72462", "72464", "72465", "72466", "72467", "72469", "72470", "72471", "72472", "72473", "72474", "72475", "72476", "72478", "72479", "72482", "72501", "72503", "72512", "72513", "72515", "72517", "72519", "72520", "72521", "72522", "72523", "72524", "72525", "72526", "72527", "72528", "72529", "72530", "72531", "72532", "72533", "72534", "72536", "72537", "72538", "72539", "72540", "72542", "72543", "72544", "72545", "72546", "72550", "72553", "72554", "72555", "72556", "72560", "72561", "72562", "72564", "72565", "72566", "72567", "72568", "72569", "72571", "72572", "72573", "72575", "72576", "72577", "72578", "72579", "72581", "72583", "72584", "72585", "72587", "72601", "72602", "72611", "72613", "72615", "72616", "72617", "72619", "72623", "72624", "72626", "72628", "72629", "72630", "72631", "72632", "72633", "72634", "72635", "72636", "72638", "72639", "72640", "72641", "72642", "72644", "72645", "72648", "72650", "72651", "72653", "72654", "72655", "72657", "72658", "72659", "72660", "72661", "72662", "72663", "72666", "72668", "72669", "72670", "72672", "72675", "72677", "72679", "72680", "72682", "72683", "72685", "72686", "72687", "72701", "72702", "72703", "72704", "72711", "72712", "72714", "72715", "72716", "72717", "72718", "72719", "72721", "72722", "72727", "72728", "72729", "72730", "72732", "72733", "72734", "72735", "72736", "72737", "72738", "72739", "72740", "72741", "72742", "72744", "72745", "72747", "72749", "72751", "72752", "72753", "72756", "72757", "72758", "72760", "72761", "72762", "72764", "72765", "72766", "72768", "72769", "72770", "72773", "72774", "72776", "72801", "72802", "72811", "72812", "72820", "72821", "72823", "72824", "72826", "72827", "72828", "72829", "72830", "72832", "72833", "72834", "72835", "72837", "72838", "72839", "72840", "72841", "72842", "72843", "72845", "72846", "72847", "72851", "72852", "72853", "72854", "72855", "72856", "72857", "72858", "72860", "72863", "72865", "72901", "72902", "72903", "72904", "72905", "72906", "72908", "72913", "72914", "72916", "72917", "72918", "72919", "72921", "72923", "72926", "72927", "72928", "72930", "72932", "72933", "72934", "72935", "72936", "72937", "72938", "72940", "72941", "72943", "72944", "72945", "72946", "72947", "72948", "72949", "72950", "72951", "72952", "72955", "72956", "72957", "72958", "72959"];

//Assist.availableZips = ["73001", "73002", "73003", "73004", "73005", "73007", "73008", "73009", "73013", "73016", "73017", "73018", "73019", "73020", "73026", "73027", "73030", "73034", "73036", "73038", "73044", "73045", "73049", "73050", "73051", "73052", "73054", "73055", "73057", "73058", "73059", "73061", "73063", "73064", "73066", "73067", "73068", "73069", "73071", "73072", "73075", "73077", "73078", "73079", "73080", "73082", "73084", "73089", "73093", "73095", "73096", "73097", "73098", "73099", "73101", "73102", "73103", "73104", "73105", "73106", "73107", "73108", "73109", "73110", "73111", "73112", "73114", "73115", "73116", "73117", "73118", "73119", "73120", "73121", "73122", "73125", "73126", "73127", "73128", "73129", "73130", "73131", "73132", "73134", "73135", "73139", "73141", "73142", "73143", "73145", "73149", "73150", "73151", "73159", "73160", "73162", "73163", "73165", "73167", "73169", "73170", "73173", "73179", "73190", "73195", "73401", "73402", "73430", "73432", "73438", "73439", "73440", "73441", "73446", "73447", "73448", "73449", "73455", "73456", "73459", "73460", "73461", "73463", "73501", "73503", "73505", "73507", "73521", "73522", "73526", "73527", "73533", "73537", "73543", "73547", "73549", "73552", "73554", "73560", "73565", "73572", "73573", "73601", "73620", "73622", "73632", "73644", "73651", "73655", "73661", "73662", "73701", "73703", "73705", "73717", "73720", "73727", "73728", "73736", "73737", "73743", "73744", "73753", "73759", "73771", "73773", "73801", "73842", "73860", "73938", "74001", "74002", "74003", "74004", "74005", "74006", "74008", "74009", "74010", "74011", "74012", "74013", "74014", "74015", "74016", "74017", "74020", "74021", "74022", "74023", "74027", "74028", "74030", "74032", "74033", "74035", "74037", "74038", "74041", "74048", "74052", "74053", "74055", "74056", "74059", "74061", "74062", "74063", "74066", "74070", "74072", "74073", "74074", "74075", "74076", "74078", "74079", "74083", "74085", "74101", "74103", "74104", "74105", "74106", "74107", "74108", "74110", "74112", "74114", "74115", "74116", "74119", "74120", "74126", "74127", "74128", "74129", "74130", "74131", "74132", "74133", "74134", "74135", "74136", "74137", "74145", "74146", "74149", "74158", "74172", "74301", "74331", "74339", "74343", "74344", "74346", "74349", "74350", "74354", "74358", "74360", "74361", "74363", "74369", "74370", "74401", "74402", "74403", "74422", "74423", "74426", "74427", "74429", "74431", "74432", "74434", "74435", "74436", "74437", "74441", "74445", "74446", "74447", "74450", "74451", "74454", "74457", "74460", "74461", "74462", "74464", "74467", "74472", "74501", "74502", "74523", "74525", "74531", "74533", "74534", "74538", "74543", "74546", "74547", "74554", "74555", "74556", "74557", "74562", "74571", "74572", "74577", "74578", "74601", "74604", "74630", "74631", "74637", "74641", "74644", "74647", "74650", "74651", "74653", "74701", "74723", "74727", "74729", "74735", "74738", "74740", "74743", "74745", "74748", "74756", "74759", "74761", "74764", "74801", "74804", "74820", "74825", "74826", "74831", "74832", "74834", "74837", "74848", "74849", "74854", "74855", "74859", "74860", "74864", "74865", "74866", "74868", "74872", "74873", "74878", "74880", "74881", "74883", "74884", "74901", "74902", "74930", "74936", "74946", "74948", "74954", "74955", "74959", "74963", "74965"];

Assist.validateEmail = function(email) {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

Assist.isValidDate = function(d) {
  if (Object.prototype.toString.call(d) !== "[object Date]") {
    return false;
  }

  return !isNaN(d.getTime());
}

Assist.validationErr = function(errors) {
  var html = "<ul class='errors'>";
  for (var i = 0; i < errors.length; i++) {
    html += "<li>" + errors[i] + "</li>";
  }

  html += "</ul>";
  var bodySize = errors.length * 35;
  jQuery('#modal-validation .body').css('height', bodySize + 'px');
  jQuery('#modal-validation').css('height', (bodySize + 110) + 'px');
  jQuery('#modal-validation .body').html(html);
  jQuery('#modal-validation').modal();
}

/**
 *posts the new data of the form back to the ajax backend and calls the update
 */
Assist.postFormProgress = function(data, handler) {

  data['action'] = 'enrollment_form';

  jQuery.ajax({
    url : '/wp-admin/admin-ajax.php',
    type: 'POST',
    data : data,
    dataType : 'json'
  }).done(handler);
}

Assist.getFormValues = function(fieldNames) {
  var fields = (jQuery("#enrollment-form").serializeArray());
  var data = {};
  for(var i=0; i<fieldNames.length; i++) {
    for(var j=0; j<fields.length; j++) {
      var field = fields[j];
      var fieldName = fieldNames[i];
      if(fieldName===field.name) {
        data[fieldName] = field.value;
      }
    }
  }
  data['fieldNames'] = fieldNames.join(",");
  return data;
}

Assist.submitStep1 = function() {
  var errors = [];
  if (jQuery('#zip').val() == '') {
    errors.push("Please enter your zip code.");
  }
  if (jQuery('input:radio[name=household]:checked').length == 0) {
    errors.push("Please indicate whether your household receives Lifeline service.");
  }

  if (jQuery('#email').val() == '') {
    errors.push("Please enter your email address.");
  } else if (!Assist.validateEmail(jQuery('#email').val())) {
    errors.push("Please enter a valid email address.");
  }

  if (errors.length > 0) {
    Assist.validationErr(errors);
    return;
  }

  jQuery('#second-email').val(jQuery('#email').val());

  jQuery('#address-zip').html(jQuery('#zip').val());
  var hasExistingLine = jQuery('input:radio[name=household]:checked').val() == 'true';

  var zipVal = jQuery('#zip').val();

  var selectedState = jQuery.inArray(zipVal, Assist.oklahomaZips) > -1 ? "OK" : "";
  if (selectedState == "")
    selectedState = jQuery.inArray(zipVal, Assist.marylandZips) > -1 ? "MD" : "";
  if (selectedState == "")
    selectedState = jQuery.inArray(zipVal, Assist.missouriZips) > -1 ? "MO" : "";
  if (selectedState == "")
    selectedState = jQuery.inArray(zipVal, Assist.arkansasZips) > -1 ? "AR" : "";

  var isValidZip = selectedState != "";

  if (hasExistingLine) {
    jQuery('#modal-existing-line').modal();
    return;
  } else if (!isValidZip) {
    jQuery('#modal-no-service').modal();
    return;
  }

  jQuery('.plans-row').hide();

  jQuery('.plans-row.' + selectedState).show();

  jQuery('#state').val(selectedState);
  jQuery('#address-state').html(selectedState);

  jQuery('#intro-summary').hide();
  _gaq.push(['_trackPageview', '/enrollment-form/step2']);

  var data = Assist.getFormValues(['wpid','enrollmentId','zip','email']);
  data['step'] = 1;
  data['next_step'] = 2;
  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step2');
  });

};

Assist.submitStep2 = function() {
  var errors = [];
  if (jQuery('#fname').val() == '') {
    errors.push("Please enter your first name.");
  }
  if (jQuery('#lname').val() == '') {
    errors.push("Please enter your last name.");
  }
  if (jQuery('#ssn').val() == '') {
    errors.push("Please enter the last four digits of your SSN.");
  } else if (!(/^\s*\d{4}\s*$/.test(jQuery('#ssn').val()))) {
    errors.push("Please enter valid digits for your SSN.");
  }
  var phoneVal = jQuery('#phone').val();
  if (phoneVal !== '' && !(/^(\([0-9]{3}\)|[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(phoneVal))) {
    errors.push("Please enter a valid phone number.");
  }

  if (jQuery('#second-email').val() == '') {
        errors.push("Please enter your email address.");
  } else if (!Assist.validateEmail(jQuery('#second-email').val())) {
        errors.push("Please enter a valid email address.");
  }

  var dob = jQuery('#dob-month').val() + "/" + jQuery('#dob-day').val() + '/' + jQuery('#dob-year').val();
  if (!Assist.isValidDate(new Date(dob))) {
    errors.push("Please enter a valid date of birth.");
  }

  if (jQuery('input:radio[name=temporary]:checked').length == 0) {
    errors.push("Please indicate if your address is a temporary residence.");
  }

  if (jQuery('input:radio[name=share_household]:checked').length == 0) {
    errors.push("Please indicate if you live with other households at your address.");
  }

  if (jQuery('#address').val() == '') {
    errors.push("Please enter your address.");
  }

  if (jQuery('#city').val() == '') {
    errors.push("Please enter your city.");
  }

  if (jQuery('#state').val() == '') {
    errors.push("Please enter your state.");
  }

  if (errors.length > 0) {
    Assist.validationErr(errors);
    return;
  }
  var data = Assist.getFormValues(['enrollmentId','first_name','middle_initial','last_name','ssn','phone','temporary','share_household','dob','email']);

  data['email'] = jQuery('#second-email').val();

  data['dob'] = jQuery("#dob-year").val() + "-" +jQuery("#dob-month").val() + "-" + jQuery("#dob-day").val();

  var url = "/isAddressValid.php?address=" + encodeURIComponent(jQuery('#address').val());
  url += "&address2=" + encodeURIComponent(jQuery('#apt').val());
  url += "&city=" + encodeURIComponent(jQuery('#city').val());
  url += "&state=" + encodeURIComponent(jQuery('#state').val());
  url += "&zip=" + encodeURIComponent(jQuery('#zip').val());

  jQuery('#address-loading').show();
  jQuery('#modal-address').modal();

  jQuery.ajax({
    url : url,
    type : 'POST'
  }).done(function(data) {
    jQuery('#address-loading').hide();
    var dataObj = jQuery.parseJSON(data);
    jQuery('#address-accept').hide();
    if (dataObj.error == "true") {
      jQuery('#full-address').html("No matching address found.");
    } else {
      jQuery('#full-address').html(dataObj.fullText);
      jQuery('#m-address').val(dataObj.address);
      jQuery('#m-apt').val(dataObj.apt);
      jQuery('#m-state').val(dataObj.state);
      jQuery('#m-city').val(dataObj.city);
      jQuery('#m-zip').val(dataObj.zip);
      jQuery('#address-accept').show();
    }
  });

  data['step'] = 2;
  data['next_step'] = 3;

  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step3');
  });
};


Assist.step3Agree = function() {
  var errors = [];
  if (jQuery('input:radio[name=plan]:checked').length == 0) {
    errors.push("Please select a plan.");
  }

  if (errors.length > 0) {
    Assist.validationErr(errors);
    return;
  }

  _gaq.push(['_trackPageview', '/enrollment-form/step3']);


	var data = Assist.getFormValues(['enrollmentId', 'plan']);
	data['plan'] = jQuery("input:radio[name=plan]:checked").val();
  
  data['step'] = 3;
  data['next_step'] = 4;
  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step4');
  });
};


Assist.submitStep4 = function() {
  var errors = [];

/*
  if (jQuery('input:radio[name=spouse]:checked').length == 0) {
    errors.push("Please indicate if your spouse receives Lifeline service.");
  }
  if (jQuery('input:checkbox[name=other_adults]:checked').length == 0) {
    errors.push("Please indicate if any other people live with at your address.");
  }
  if (jQuery('input:radio[name=share_expenses]:checked').length == 0) {
    errors.push("Please indicate whether or not your share living expenses.");
  }
  if (jQuery('#initial_text').val() == '') {
    errors.push("Please initial the form.");
  }
  if (jQuery('input:checkbox[name=fcc]:checked').length == 0) {
    errors.push("Please indicate whether you understand the FCC's rules around the Lifeline service.");
  }
*/  

  if (jQuery('input:radio[name=program]:checked').length == 0) {
    errors.push("Please select a program.");
  }

  if (errors.length > 0) {
    Assist.validationErr(errors);
    return;
  }
  _gaq.push(['_trackPageview', '/enrollment-form/step4']);

	var data = Assist.getFormValues(['enrollmentId', 'program', 'spouse', 'other_adults', 'share_expenses', 'alt_fname', 'alt_mname', 'alt_lname', 'initial_text']);
	data['program'] = jQuery("input:radio[name=program]:checked").val();
  
  data['step'] = 4;
  data['next_step'] = 4;
  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step5');
  });

};


Assist.step5Agree = function() {
	var errors = [];
	
	for (var i = 1; i < 10; i++) {
		var id = '#initial' + i;
		if (jQuery(id + ':checked').length == 0) {
			errors.push("Please agree to all terms by selecting any unchecked boxes");
			break;
		}
	}

	if (errors.length > 0) {
		Assist.validationErr(errors);
		return;
	}

	_gaq.push(['_trackPageview', '/enrollment-form/step5']);
	
	var data = Assist.getFormValues(['enrollmentId', 'signature', 'initial1','initial2','initial3','initial4','initial5','initial6','initial7','initial8','initial9','initial10']);
	data['signature'] = jQuery("#fname").val() + " " + jQuery("#last_name").val();
	
	data['step'] = 5;	
	data['next_step'] = 6;
	
	Assist.postFormProgress(data, function() {
		jQuery('#enrollment-form').submit();
	});

};


Assist.AcceptAddress = function() {
  jQuery('#address').val(jQuery('#m-address').val());
  jQuery('#state').val(jQuery('#m-state').val());
  jQuery('#city').val(jQuery('#m-city').val());
  jQuery('#zip').val(jQuery('#m-zip').val());

  _gaq.push(['_trackPageview', '/enrollment-form/step3']);

  var data = Assist.getFormValues(['enrollmentId','address','apt','city','state','zip']);
  data['step'] = 2;
  data['next_step'] = '3';

  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step3', true);
  });
}


Assist.submitStep3b = function() {
  var errors = [];
  if (jQuery('#program').val() == '') {
    errors.push("Please choose a Program or Income.");
  } else {
    var program = jQuery('#program').val();
    if (program == 'Income At or Below 135% of FPG') {
      var income = jQuery('#income').val().replace(',', '').replace('jQuery', '');
      if (isNaN(parseFloat(income))) {
        errors.push("Please enter your annual household income.");
      } else {
        jQuery('#income').val(income);
      }
    }
  }
  if (errors.length > 0) {
    Assist.validationErr(errors);
    return;
  }

  _gaq.push(['_trackPageview', '/enrollment-form/step3c']);

  var data = Assist.getFormValues(['enrollmentId','program','number_household', 'income']);
  data['step'] = 3;
  data['next_step'] = '3c';

  Assist.postFormProgress(data, function() {
    Assist.next('enrollment-step3c', true);
  });
};


Assist.closeCoupon = function(){
    jQuery('#mask').hide();
    jQuery('.Coupon').hide();
}

Assist.ShowCoupon = function (){

    if (Assist.hasUnloadWarning == true) {
        window.onbeforeunload = null;
        return;
    }

    //Get the screen height and width
    var maskHeight = jQuery(document).height();
    var maskWidth = jQuery(window).width();

    //Set height and width to mask to fill up the whole screen
    jQuery('#mask').css({'width':maskWidth,'height':maskHeight});

    //transition effect
    jQuery('#mask').show();

    jQuery('#mask').click(function(){
        Assist.closeCoupon();
    });

    jQuery('.Coupon').show();
    globalHasWarning = true;
    return "Are you sure you want to leave? You haven't uploaded your documents. Print out this page and the coupon below for an additional $10 off!";
}

Assist.ClearUnload = function(){
    window.onbeforeunload = function(){   };
}

Assist.submitForm = function() {
  jQuery('#submission-method').val(jQuery('input[name=submission]').val());
  _gaq.push(['_trackPageview', '/enrollment-form/step6']);

  var data = Assist.getFormValues(['enrollmentId','submission_method']);

  data['submission_method'] = jQuery('input[name=submission]:checked').val();

  data['step'] = 6;
  data['next_step'] = '6';
  Assist.ClearUnload();
  Assist.postFormProgress(data, function() {
    jQuery('#enrollment-form').submit();
  });
};

Assist.upload = function() {
  jQuery('#modal-upload').modal();
}

Assist.addFile = function() {
  jQuery('#file-upload-form').append("<input type='file' name='documents[]'/>");
}

Assist.uploadFiles = function() {
  if (jQuery("#file1").val() == "") {
    alert("Please upload at least one file.");
    return;
  }

  Assist.ClearUnload();
  jQuery('#file-upload-form').submit();
}

Assist.selectProgram = function() {
  var program = jQuery('#program').val();
  if (program == 'Income At or Below 135% of FPG') {
    jQuery('#poverty-details').show();
    jQuery('.poverty-table').show();
    jQuery('#mobile-poverty-table').addClass('active');
  } else {
    jQuery('#poverty-details').hide();
      jQuery('.poverty-table').hide();
      jQuery('#mobile-poverty-table').removeClass('active');
  }
}

Assist.quit = function() {
  _gaq.push(['_trackPageview', '/enrollment-form/step1-back']);
  Assist.next('enrollment-step1')
};

Assist.next = function(destination, dontUpdateMenu) {
  if (!dontUpdateMenu) {
    jQuery('#enrollment-form-steps li').removeClass('active');
    jQuery('#enrollment-form-steps li.steps-' + destination).addClass('active');
  }

  jQuery('.enrollment-step').hide();
  jQuery('#' + destination).show();

  document.body.scrollTop = document.documentElement.scrollTop = 0;
};

